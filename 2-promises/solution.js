/*
INSTRUCTIONS

1. using promise API, i.e. only .then() .catch() and .finally() methods,
consume the methods in firstnames.js and lastnames.js
2. don't use any async/await here
3. lastnames.js method expects a positive integer id, it returns a lastname,
if the id is multiple of 5 it returns a nonexistent lastname
4. firstnames.js method expects a lastname generated by the method above,
it returns a name
5. methods should be consumed sequentially, i.e. lastnames method first,
and its results will serve as argument for firstnames method
6. implement a randomizing logic that provides you an id for lastnames method,
this value type must be a positive integer between 0-100,
or something that is not a positive integer
The point here is getting correct and incorrect values to get successful
and failing promises results from lastnames method

Example:
const id = yourRandomMethod() //first run
 -- id gets a value of undefined, or you can get a null, boolean, string,
 whatever different to a positive integer

const id = yourRandomMethod() //second run
 -- id gets a value of 31

const id = yourRandomMethod() //third run
-- id gets a value of 10

6. use promise chaining accordingly, don't forget error handling
7. log the resultant fullname, or the error, at the end
*/

function solution() {
  // function imports
  const getFirstName = require("./firstnames.js");
  const getLastName = require("./lastnames");

  // As lastName doesn't require input, it's declared as Promise
  const promiseLastName = new Promise((resolve) => {
    const randValue = getRandValue();
    // console.log(randValue); //toggle comment to test randValue
    resolve(getLastName(randValue));
  });

  // As firstName require the resolution of lastName it's declared as function with one parameter
  const promiseFirstName = (lastName) => {
    return new Promise((resolve) => {
      resolve(getFirstName(lastName));
    });
  };

  // PROPOSAL 1: Prints first and last name in different lines
  const fullName = promiseLastName
    .then((lastName) => {
      console.log(lastName);
      return promiseFirstName(lastName);
    })
    .then((firstName) => console.log(firstName))
    .catch((err) => console.error(err.message));
  // ||||||||||||||||||||||||||||||||
  // let storedLastName = "";
  // promiseLastName
  //   .then((lastNam) => (storedLastName = lastNam))
  //   .then((lastNam) => promiseFirstName(lastNam))
  //   .then((firstN) => console.log(`${firstN} ${storedLastName}`))
  //   .catch((err) => console.error(err.message));

  function getRandValue() {
    //20% of times it returns a string
    //20% of times it returns a negative number
    //60% of times it returns an integer
    // random number to return between 0 and 100
    const randomForReturn = Math.floor(Math.random() * 99) + 1;
    // generates a randomNumber between (and including) 0-5 to determine what happens next
    const whatShouldHappenNext = Math.floor(Math.random() * 5) + 1;
    //returns as string to test "./lastname.js" first if
    if (whatShouldHappenNext === 1) return randomForReturn.toString();
    //returns as negative number to test "./lastname.js" second if
    if (whatShouldHappenNext === 2) return randomForReturn * -1;
    //in case [3,4,5] returns integer between 0 and 100
    return randomForReturn;
  }
}

solution();
